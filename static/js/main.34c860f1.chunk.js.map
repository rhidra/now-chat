{"version":3,"sources":["../node_modules/peerjs/dist sync","components/message-form/message-form.js","components/chat-view/chat-view.js","components/chat/chat.js","components/side-bar/side-bar.js","models/chat-proxy.js","models/message-format.js","components/app/app.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","MessageForm","props","state","value","handleChange","bind","handleSubmit","handleKeyDown","this","setState","target","preventDefault","onSubmit","key","shiftKey","Form","InputGroup","FormControl","as","rows","onChange","onKeyDown","disabled","status","Append","Button","variant","type","React","Component","ChatView","list","history","map","msg","i","content","from","data","split","text","j","to","className","Chat","onSendData","SideBar","onConnect","onDisconnect","username","targetId","useState","setId","console","log","Alert","FormGroup","FormLabel","onClick","ChatProxy","peer","Peer","conn","dataReceivedCb","changeUsernameCb","connectedCb","errorCb","disconnectedCb","on","setUsername","setConnection","disconnect","err","error","otherId","connect","Promise","reject","fun","setTimeout","open","close","send","MessageFormat","chatProxy","uuidv4","peerId","App","msgFormat","onChangeUsername","onConnected","concat","connection","onDisconnected","disconnection","onDataReceived","updateScroll","then","catch","formatMessage","Navbar","bg","expand","Brand","href","Container","fluid","Row","Col","md","handleSendData","handleConnect","handleDisconnect","element","document","getElementById","scrollTop","scrollHeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.34c860f1.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 47;","import React from 'react';\nimport {FormControl, Button, InputGroup, Form} from 'react-bootstrap';\nimport * as Icon from 'react-bootstrap-icons';\n\nclass MessageForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({value: e.target.value});\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.onSubmit(this.state.value);\n    this.setState({value: ''});\n  }\n\n  handleKeyDown(e) {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      this.handleSubmit(e)\n    }\n  }\n\n  render() {\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <InputGroup>\n          <FormControl as=\"textarea\" rows=\"1\" value={this.state.value} onChange={this.handleChange} onKeyDown={this.handleKeyDown} \n                      disabled={this.props.status !== 'connected'}/>\n\n          <InputGroup.Append>\n            <Button variant={this.props.status === 'connected' ? 'primary' : 'danger'} type=\"submit\" disabled={this.props.status !== 'connected'}>\n              Send <Icon.CheckCircleFill/>\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      </Form>\n    );\n  }\n}\n\nexport default MessageForm;","import React, { Fragment } from 'react';\n\nfunction ChatView(props) {\n  const list = props.history.map((msg, i) => {\n    let content;\n    if (msg.type === 'message') {\n      content = \n        <>\n          <strong>{msg.from}: </strong>\n          {msg.data.split('\\n').map((text, j) => <Fragment key={j}>{text}<br/></Fragment>)}\n        </>;\n    } else if (msg.type === 'connection') {\n      content = <>Started a connection with {msg.to}</>;\n    } else if (msg.type === 'disconnection') {\n      content = <>Disconnection !</>;\n    } else {\n      content = <>Unknown content type !</>;\n    }\n\n    return (\n      <li key={msg.id} className={msg.type}>\n        {content}\n      </li>\n    );\n  });\n\n  return (\n    <ul className=\"chat-view\" id=\"chat-view\">\n      {list}\n    </ul>\n  );\n}\n  \nexport default ChatView;","import React from 'react';\nimport MessageForm from '../message-form';\nimport ChatView from '../chat-view';\n\nfunction Chat({status, history, onSendData}) {\n  return (\n    <div className='chat'>\n      <ChatView history={history}/>\n      <MessageForm status={status} onSubmit={data => onSendData(data)}/>\n    </div>\n  );\n}\n  \nexport default Chat;","import React, {useState} from 'react';\nimport { Form, FormGroup, FormControl, FormLabel, Button, Alert } from 'react-bootstrap';\n\nfunction SideBar({status, onConnect, onDisconnect, username, targetId}) {\n  const [id, setId] = useState('');\n  const handleSubmit = e => {\n    e.preventDefault();\n    onConnect(id);\n  }\n\n  console.log(targetId);\n  if (status === 'connected' && targetId && targetId !== id) {\n    setId(targetId);\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      {status === 'error' && <Alert variant=\"danger\">Error ! Are you sure this ID exists ?</Alert>}\n      {status === 'connected' && <Alert variant=\"success\">You are connected to another user !</Alert>}\n      {status === 'disconnected' && <Alert variant=\"info\">You are disconnected. Enter another user ID to start chatting.</Alert>}\n\n      <FormGroup>\n        <FormLabel>Your ID</FormLabel>\n        <FormControl type=\"text\" disabled value={username}/>\n      </FormGroup>\n\n      <FormGroup>\n        <FormLabel>Target ID</FormLabel>\n        <FormControl value={id} onChange={e => setId(e.target.value)} type=\"text\" disabled={status !== 'disconnected'}/>\n      </FormGroup>\n\n      {(status === 'disconnected' || status === 'error') && <Button type=\"submit\">Connect to the target</Button>}\n      {status === 'loading' && <Button type=\"submit\" disabled>Connecting ...</Button>}\n      {status === 'connected' && <Button type=\"submit\" disabled variant=\"success\">Connected</Button>}\n\n      {status === 'connected' && <Button type=\"button\" onClick={() => onDisconnect()} variant=\"danger\">Disconnect</Button>}\n    </Form>\n  );\n}\n  \nexport default SideBar;","import Peer from 'peerjs';\n\nclass ChatProxy {\n  constructor() {\n    this.peer = new Peer();\n    this.username = 'anonymous';\n    this.conn = null;\n    this.dataReceivedCb = () => {};\n    this.changeUsernameCb = () => {};\n    this.connectedCb = () => {};\n    this.errorCb = () => {};\n    this.disconnectedCb = () => {};\n\n    this.peer.on('open', id => this.setUsername(id));\n    this.peer.on('connection', conn => this.setConnection(conn));\n    this.peer.on('disconnected', () => this.disconnect());\n    this.peer.on('close', () => this.disconnect());\n    this.peer.on('error', err => {\n      console.error('Error PeerJS :', err);\n      this.errorCb(err);\n    });\n  }\n\n  connect(otherId) {\n    console.log('Connecting to ', otherId, 'as', this.username);\n    const conn = this.peer.connect(otherId);\n\n    return new Promise((resolve, reject) => {\n      conn.on('open', () => {\n        this.setConnection(conn);\n        resolve();\n      })\n      this.errorCb = reject;\n    });\n  }\n\n  setUsername(id) {\n    console.log('Set username', id);\n    this.username = id;\n    this.changeUsernameCb(this.username);\n  }\n\n  onChangeUsername(fun) {\n    this.changeUsernameCb = fun;\n  }\n\n  setConnection(conn) {\n    console.log('Connected to', conn);\n    this.conn = conn;\n    this.conn.on('data', data => {\n      console.log('Data received:', data)\n      this.dataReceivedCb(data)\n    });\n    this.conn.on('error', err => {\n      console.error('PeerJS Connection Error:', err);\n      this.errorCb(err);\n    });\n    this.conn.on('close', () => this.disconnect());\n\n    setTimeout(() => this.connectedCb(conn), 100);\n  }\n\n  disconnect() {\n    if (this.conn && this.conn.open) {\n      this.conn.close();\n    }\n\n    this.disconnectedCb();\n  }\n\n  onConnected(fun) {\n    this.connectedCb = fun;\n  }\n\n  onDisconnected(fun) {\n    this.disconnectedCb = fun;\n  }\n\n  onDataReceived(fun) {\n    this.dataReceivedCb = fun;\n  }\n\n  send(data) {\n    console.log('Sending data:', data);\n    this.conn.send(data);\n  }\n\n  get peerId() {\n    return this.conn ? (this.conn.open ? this.conn.peer : null) : null;\n  }\n}\n\nexport default ChatProxy;","import {v4 as uuidv4} from 'uuid';\n\nclass MessageFormat {\n  constructor(chatProxy) {\n    this.chatProxy = chatProxy;\n  }\n\n  formatMessage(msg) {\n    return {\n      id: uuidv4(),\n      type: 'message',\n      from: this.chatProxy.username,\n      to: this.chatProxy.peerId,\n      data: msg,\n    };\n  }\n\n  connection() {\n    return {\n      id: uuidv4(),\n      type: 'connection',\n      from: this.chatProxy.username,\n      to: this.chatProxy.peerId,\n      data: '',\n    }\n  }\n\n  disconnection() {\n    return {\n      id: uuidv4(),\n      type: 'disconnection',\n      from: this.chatProxy.username,\n      to: this.chatProxy.peerId,\n      data: '',\n    }\n  }\n}\n\nexport default MessageFormat;","import React from 'react';\nimport Chat from '../chat';\nimport SideBar from '../side-bar';\nimport {Container, Row, Col, Navbar} from 'react-bootstrap';\nimport ChatProxy from '../../models/chat-proxy';\nimport MessageFormat from '../../models/message-format';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: 'disconnected',\n      username: 'anonymous',\n      history: [],\n    }\n    this.chatProxy = new ChatProxy();\n    this.msgFormat = new MessageFormat(this.chatProxy);\n  }\n\n  componentDidMount() {\n    this.chatProxy.onChangeUsername(username => this.setState({username}));\n    this.chatProxy.onConnected(() => \n      this.setState({\n        status: 'connected',\n        history: this.state.history.concat([this.msgFormat.connection()]),\n      })\n    );\n    this.chatProxy.onDisconnected(() => \n      this.setState({\n        status: 'disconnected', \n        history: this.state.history.concat([this.msgFormat.disconnection()]),\n      })\n    );\n    this.chatProxy.onDataReceived(data => {\n      this.setState({history: this.state.history.concat([data])})\n      this.updateScroll();\n    });\n  }\n\n  // Connect the client to another client with its id\n  handleConnect(id) {\n    this.setState({status: 'loading'})\n    this.chatProxy.connect(id)\n      .then(() => this.setState({status: 'connected'}))\n      .catch(() => this.setState({status: 'error'}));\n  }\n\n  handleDisconnect() {\n    this.setState({status: 'loading'});\n    this.chatProxy.disconnect();\n  }\n\n  handleSendData(data) {\n    data = this.msgFormat.formatMessage(data);\n    this.chatProxy.send(data);\n    this.setState({history: this.state.history.concat([data])});\n    this.updateScroll();\n  }\n\n  render(){\n    return (\n      <>\n      <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">Now Chat !</Navbar.Brand>\n      </Navbar>\n\n      <Container fluid className=\"app\">\n        <Row className=\"h-100\">\n          <Col md=\"9\" className=\"chat-col\">\n            <Chat status={this.state.status} history={this.state.history} onSendData={data => this.handleSendData(data)}/>\n          </Col>\n\n          <Col md=\"3\" className=\"sidebar-col\">\n            <SideBar status={this.state.status} \n                     username={this.chatProxy.username}\n                     targetId={this.chatProxy.peerId}\n                     onConnect={id => this.handleConnect(id)}\n                     onDisconnect={id => this.handleDisconnect(id)}/>\n          </Col>\n        </Row>\n      </Container>\n      </>\n    );\n  }\n\n  updateScroll() {\n    setTimeout(() => {\n      const element = document.getElementById('chat-view');\n      element.scrollTop = element.scrollHeight;\n    }, 100);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}