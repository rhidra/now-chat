{"version":3,"sources":["../node_modules/peerjs/dist sync","components/message-form/message-form.js","components/chat-view/chat-view.js","components/chat/chat.js","components/side-bar/side-bar.js","models/chat-proxy.js","components/app/app.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","MessageForm","props","state","value","handleChange","bind","handleSubmit","handleKeyDown","this","setState","target","preventDefault","onSubmit","key","shiftKey","Form","InputGroup","FormControl","as","rows","onChange","onKeyDown","Append","Button","variant","status","type","disabled","React","Component","ChatView","className","history","map","msg","i","from","data","split","text","j","Chat","onSendData","SideBar","onConnect","username","useState","setId","Alert","FormGroup","FormLabel","ChatProxy","peer","Peer","conn","dataReceivedCb","changeUsernameCb","connectedCb","errorCb","on","setUsername","setConnection","err","console","error","otherId","log","connect","Promise","reject","fun","send","uuidv4","to","App","chatProxy","onChangeUsername","onConnected","onDataReceived","concat","updateScroll","then","catch","preprocessData","Navbar","bg","expand","Brand","href","Container","fluid","Row","Col","md","handleSendData","handleConnect","setTimeout","element","document","getElementById","scrollTop","scrollHeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cdb214ab.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 47;","import React from 'react';\nimport {FormControl, Button, InputGroup, Form} from 'react-bootstrap';\nimport * as Icon from 'react-bootstrap-icons';\n\nclass MessageForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({value: e.target.value});\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.onSubmit(this.state.value);\n    this.setState({value: ''});\n  }\n\n  handleKeyDown(e) {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      this.handleSubmit(e)\n    }\n  }\n\n  render() {\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <InputGroup>\n          <FormControl as=\"textarea\" rows=\"3\" value={this.state.value} onChange={this.handleChange} onKeyDown={this.handleKeyDown}/>\n\n          <InputGroup.Append>\n            <Button variant={this.props.status === 'connected' ? 'primary' : 'danger'} type=\"submit\" disabled={this.props.status !== 'connected'}>\n              Send <Icon.CheckCircleFill/>\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      </Form>\n    );\n  }\n}\n\nexport default MessageForm;","import React, { Fragment } from 'react';\n\nfunction ChatView(props) {\n  return (\n    <ul className=\"chat-view\" id=\"chat-view\">\n      {props.history.map((msg, i) =>\n        <li key={msg.id}>\n          <strong>{msg.from}: </strong>\n          \n          {msg.data.split('\\n').map((text, j) => <Fragment key={j}>{text}<br/></Fragment>)}\n        </li>\n      )}\n    </ul>\n  );\n}\n  \nexport default ChatView;","import React from 'react';\nimport MessageForm from '../message-form';\nimport ChatView from '../chat-view';\n\nfunction Chat({status, history, onSendData}) {\n  return (\n    <div className='chat'>\n      <ChatView history={history}/>\n      <MessageForm status={status} onSubmit={data => onSendData(data)}/>\n    </div>\n  );\n}\n  \nexport default Chat;","import React, {useState} from 'react';\nimport { Form, FormGroup, FormControl, FormLabel, Button, Alert } from 'react-bootstrap';\n\nfunction SideBar({status, onConnect, username}) {\n  const [id, setId] = useState('');\n  const handleSubmit = e => {\n    e.preventDefault();\n    onConnect(id);\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      {status === 'error' && <Alert variant=\"danger\">Error ! Are you sure this ID exists ?</Alert>}\n      {status === 'connected' && <Alert variant=\"success\">You are connected to another user ! Let's chat !</Alert>}\n\n      <FormGroup>\n        <FormLabel>Your ID</FormLabel>\n        <FormControl type=\"text\" disabled value={username}/>\n      </FormGroup>\n\n      <FormGroup>\n        <FormLabel>Target ID</FormLabel>\n        <FormControl value={id} onChange={e => setId(e.target.value)} type=\"text\" disabled={status === 'connected'}/>\n      </FormGroup>\n\n      {(status === 'pending' || status === 'error') && <Button type=\"submit\">Connect to the target</Button>}\n      {status === 'loading' && <Button type=\"submit\" disabled>Connecting ...</Button>}\n      {status === 'connected' && <Button type=\"submit\" disabled variant=\"success\">Connected</Button>}\n    </Form>\n  );\n}\n  \nexport default SideBar;","import Peer from 'peerjs';\nimport {v4 as uuidv4} from 'uuid';\n\nclass ChatProxy {\n  constructor() {\n    this.peer = new Peer();\n    this.username = 'anonymous';\n    this.conn = null;\n    this.dataReceivedCb = () => {};\n    this.changeUsernameCb = () => {};\n    this.connectedCb = () => {};\n    this.errorCb = () => {};\n\n    // Connected to the PeerJS server\n    this.peer.on('open', id => this.setUsername(id));\n\n    // A new connection is received\n    this.peer.on('connection', conn => this.setConnection(conn));\n\n    this.peer.on('error', err => {\n      console.error('Error PeerJS :', err);\n      this.errorCb(err);\n    });\n  }\n\n  connect(otherId) {\n    console.log('Connecting to ', otherId, 'as', this.username);\n    const conn = this.peer.connect(otherId);\n\n    return new Promise((resolve, reject) => {\n      conn.on('open', () => {\n        this.setConnection(conn);\n        resolve();\n      })\n      this.errorCb = reject;\n    });\n  }\n\n  setUsername(id) {\n    console.log('Set username', id);\n    this.username = id;\n    this.changeUsernameCb(this.username);\n  }\n\n  onChangeUsername(fun) {\n    this.changeUsernameCb = fun;\n  }\n\n  setConnection(conn) {\n    console.log('Connected to', conn);\n    this.conn = conn;\n    this.conn.on('data', data => {\n      console.log('Data received:', data)\n      this.dataReceivedCb(data)\n    });\n    this.connectedCb(conn);\n  }\n\n  onConnected(fun) {\n    this.connectedCb = fun;\n  }\n\n  onDataReceived(fun) {\n    this.dataReceivedCb = fun;\n  }\n\n  send(data) {\n    console.log('Sending data:', data);\n    this.conn.send(data);\n  }\n\n  preprocessData(msg) {\n    return {\n      id: uuidv4(),\n      from: this.username,\n      to: this.conn.peer,\n      data: msg,\n    };\n  }\n}\n\nexport default ChatProxy;","import React from 'react';\nimport Chat from '../chat';\nimport SideBar from '../side-bar';\nimport {Container, Row, Col, Navbar} from 'react-bootstrap';\nimport ChatProxy from '../../models/chat-proxy';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: 'pending',\n      username: 'anonymous',\n      history: [],\n    }\n    this.chatProxy = new ChatProxy();\n  }\n\n  componentDidMount() {\n    this.chatProxy.onChangeUsername(username => this.setState({username}));\n    this.chatProxy.onConnected(() => this.setState({status: 'connected'}));\n    this.chatProxy.onDataReceived(data => {\n      this.setState({history: this.state.history.concat([data])})\n      this.updateScroll();\n    });\n  }\n\n  // Connect the client to another client with its id\n  handleConnect(id) {\n    this.setState({status: 'loading'})\n    this.chatProxy.connect(id)\n      .then(() => this.setState({status: 'connected'}))\n      .catch(() => this.setState({status: 'error'}));\n  }\n\n  handleSendData(data) {\n    data = this.chatProxy.preprocessData(data);\n    this.chatProxy.send(data);\n    this.setState({history: this.state.history.concat([data])});\n    this.updateScroll();\n  }\n\n  render(){\n    return (\n      <>\n      <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">Now Chat !</Navbar.Brand>\n      </Navbar>\n\n      <Container fluid className=\"app\">\n        <Row className=\"h-100\">\n          <Col md=\"9\" className=\"chat-col\">\n            <Chat status={this.state.status} history={this.state.history} onSendData={data => this.handleSendData(data)}/>\n          </Col>\n\n          <Col md=\"3\" className=\"sidebar-col\">\n            <SideBar status={this.state.status} \n                     username={this.chatProxy.username}\n                     onConnect={id => this.handleConnect(id)}/>\n          </Col>\n        </Row>\n      </Container>\n      </>\n    );\n  }\n\n  updateScroll() {\n    setTimeout(() => {\n      const element = document.getElementById('chat-view');\n      element.scrollTop = element.scrollHeight;\n    }, 100);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}